//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.269
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gold.ServiceReference_DeviceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference_DeviceService.IDeviceService")]
    public interface IDeviceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceService/WcfTest", ReplyAction="http://tempuri.org/IDeviceService/WcfTestResponse")]
        bool WcfTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceService/DeviceTest", ReplyAction="http://tempuri.org/IDeviceService/DeviceTestResponse")]
        int DeviceTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceService/TagControl", ReplyAction="http://tempuri.org/IDeviceService/TagControlResponse")]
        bool TagControl(string id, int light, int sound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceService/TagShow", ReplyAction="http://tempuri.org/IDeviceService/TagShowResponse")]
        int TagShow(ref System.Collections.Generic.Dictionary<int, System.DateTime> tags);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceService/UserValidate", ReplyAction="http://tempuri.org/IDeviceService/UserValidateResponse")]
        int UserValidate(string user, string pwd, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceService/TagControlAsyn", ReplyAction="http://tempuri.org/IDeviceService/TagControlAsynResponse")]
        void TagControlAsyn(string[] tags, int light, int sound);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeviceServiceChannel : Gold.ServiceReference_DeviceService.IDeviceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeviceServiceClient : System.ServiceModel.ClientBase<Gold.ServiceReference_DeviceService.IDeviceService>, Gold.ServiceReference_DeviceService.IDeviceService {
        
        public DeviceServiceClient() {
        }
        
        public DeviceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeviceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool WcfTest() {
            return base.Channel.WcfTest();
        }
        
        public int DeviceTest() {
            return base.Channel.DeviceTest();
        }
        
        public bool TagControl(string id, int light, int sound) {
            return base.Channel.TagControl(id, light, sound);
        }
        
        public int TagShow(ref System.Collections.Generic.Dictionary<int, System.DateTime> tags) {
            return base.Channel.TagShow(ref tags);
        }
        
        public int UserValidate(string user, string pwd, string role) {
            return base.Channel.UserValidate(user, pwd, role);
        }
        
        public void TagControlAsyn(string[] tags, int light, int sound) {
            base.Channel.TagControlAsyn(tags, light, sound);
        }
    }
}
